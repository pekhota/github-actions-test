# GitHub Action for Laravel
name: Testing Laravel
on: [push, pull_request]
jobs:
  tests:
    name: Composer (PHP ${{ matrix.php-versions }} on ${{ matrix.operating-system }})
    runs-on: ${{ matrix.operating-system }}
    env:
      DB_DATABASE: laravel
      DB_USERNAME: root
      DB_PASSWORD: password
      DB_PORT: 13306
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
        ports:
          - 13306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest] # , windows-latest, macos-latest
        php-versions: ['7.2'] # , '7.3', '7.4'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: intl, sockets, bcmath, ssh2, mysql
      #          coverage: xdebug #optional
      - name: Start mysql service
        run: sudo /etc/init.d/mysql start
      - name: Verify MySQL connection from container
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          mysql --host 127.0.0.1 -P13306 -uroot -ppassword -e "SHOW DATABASES"
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Install Composer dependencies
        env:
          APP_GITHUB_TOKEN: ${{ secrets.APP_GITHUB_TOKEN }}
        run: |
          echo 123
#          composer config --global github-oauth.github.com ${APP_GITHUB_TOKEN}
          composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
        working-directory: ./php-app-1
      - name: Prepare the application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate
      - name: Clear Config
        working-directory: ./php-app-1
        run: php artisan config:clear
      #      - name: Setup tmate session
      #        uses: mxschmitt/action-tmate@v2
      - name: Run Migration
        working-directory: ./php-app-1
        run: php artisan migrate -v
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      - name: Test with phpunit
        run: vendor/bin/phpunit --coverage-text
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
#  publish:
#    runs-on: ubuntu-latest
#    needs: tests
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: Set Docker Tag
#        run: |
#          REPO_NAME=${GITHUB_REPOSITORY##*/};
#          if [[ ${GITHUB_REF} == refs/heads/* ]]
#          then
#            ACTION_REF=${GITHUB_REF:11}
#          elif [[ ${GITHUB_REF} == refs/tags/* ]]
#          then
#            ACTION_REF=${GITHUB_REF:10}
#          fi
#          echo "::set-env name=REPO_NAME::${REPO_NAME}"
#          echo "::set-env name=BUILD_TAG::${ACTION_REF//\//_}"
#
#      - name: Composer Cache
#        uses: actions/cache@v1
#        with:
#          path: vendor
#          key: composer-no-dev${{ hashFiles('composer.lock') }}
#          restore-keys: |
#            composer-no-dev-${{ hashFiles('composer.lock') }}
#            composer-dev-${{ hashFiles('composer.lock') }}
#            composer-dev-
#
#      - name: Composer Install
#        env:
#          APP_GITHUB_TOKEN: ${{ secrets.APP_GITHUB_TOKEN }}
#        run: |
#          composer config --global github-oauth.github.com ${APP_GITHUB_TOKEN}
#          composer install -n -o --prefer-dist --ignore-platform-reqs --no-dev
#
#      #      - name: Save code coverage report summary
#      #        uses: actions/download-artifact@v1
#      #        with:
#      #          name: workspace
#      #
#      #      - name: Save code covarage to file
#      #        run: mkdir -p ./storage/code-coverage; cp workspace/coverage-report-summary ./storage/code-coverage/summary
#
#      - name: Build Prod Image
#        uses: docker/build-push-action@v1
#        with:
#          username: ${{ secrets.DOCKER_USER }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#          build_args: BUILD_ID=${{ github.sha }},VERSION=${{ github.sha }}
#          repository: airslate/${{ env.REPO_NAME }}
#          tags: ${{ env.BUILD_TAG }}
#          push: ${{ startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/') }}
